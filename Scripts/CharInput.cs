//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/CharInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""88ef8d20-4eba-409e-a252-a34987de2e16"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""114f22b9-d8b2-4d0a-a576-bb7c8b5c25f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""5eb8e850-9a13-45ec-8806-98a1de27f405"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseView"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fd7de544-5d6b-4633-ac6f-a6cd4f19c1b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Value"",
                    ""id"": ""38b44415-e317-44f0-89f3-a809c6557624"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Value"",
                    ""id"": ""c25a89dd-8afc-41f0-a5ad-44265004c78b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControlNextUnit"",
                    ""type"": ""Button"",
                    ""id"": ""fce00c7a-6839-49a1-b49e-d52e84520bc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e202e0f0-b9db-404a-90c1-ccff8107d8ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RPGStop"",
                    ""type"": ""Value"",
                    ""id"": ""dca47ebd-da47-4116-bb9c-374c9801b274"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""6aa11631-337e-42d7-b7f5-d5134ec3501d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""96b16c83-6a6d-41fa-b49d-7cce9b6c61df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e95f9278-06f7-4f64-a682-c07034581d14"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""911680b3-2c13-4280-b0a2-db24b05e0b1d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2860284d-3399-45d9-84da-f3310fff5ae1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8feb1b5a-f3b3-41a8-973d-bf6316d9cc30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""affd8136-a563-47ca-b542-3996d63438cd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""639192e2-63b0-4b6d-bb89-1520dead927a"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db43381f-c0fd-4263-a574-d786a2114969"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b7137ae-7b11-419f-9444-ef563510df32"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1a4d412-c3d5-4a94-8efb-28015db3dde9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dba6495-a5fb-4eb0-89ad-d56515880d5f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlNextUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07575b4f-dc4f-4896-9793-6cb3b296959c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69fe1894-073c-46d8-8bdf-a62346f41c69"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RPGStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""030e54ca-a85c-4b2d-80f0-f5c7a4e679e3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6d57ade-44f7-4ccf-aab1-b8d11105e157"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
        m_Character_CamSwitch = m_Character.FindAction("CamSwitch", throwIfNotFound: true);
        m_Character_MouseView = m_Character.FindAction("MouseView", throwIfNotFound: true);
        m_Character_MouseClick = m_Character.FindAction("MouseClick", throwIfNotFound: true);
        m_Character_MouseRightClick = m_Character.FindAction("MouseRightClick", throwIfNotFound: true);
        m_Character_ControlNextUnit = m_Character.FindAction("ControlNextUnit", throwIfNotFound: true);
        m_Character_Attack = m_Character.FindAction("Attack", throwIfNotFound: true);
        m_Character_RPGStop = m_Character.FindAction("RPGStop", throwIfNotFound: true);
        m_Character_Use = m_Character.FindAction("Use", throwIfNotFound: true);
        m_Character_Block = m_Character.FindAction("Block", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
    private readonly InputAction m_Character_Movement;
    private readonly InputAction m_Character_CamSwitch;
    private readonly InputAction m_Character_MouseView;
    private readonly InputAction m_Character_MouseClick;
    private readonly InputAction m_Character_MouseRightClick;
    private readonly InputAction m_Character_ControlNextUnit;
    private readonly InputAction m_Character_Attack;
    private readonly InputAction m_Character_RPGStop;
    private readonly InputAction m_Character_Use;
    private readonly InputAction m_Character_Block;
    public struct CharacterActions
    {
        private @CharInput m_Wrapper;
        public CharacterActions(@CharInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Character_Movement;
        public InputAction @CamSwitch => m_Wrapper.m_Character_CamSwitch;
        public InputAction @MouseView => m_Wrapper.m_Character_MouseView;
        public InputAction @MouseClick => m_Wrapper.m_Character_MouseClick;
        public InputAction @MouseRightClick => m_Wrapper.m_Character_MouseRightClick;
        public InputAction @ControlNextUnit => m_Wrapper.m_Character_ControlNextUnit;
        public InputAction @Attack => m_Wrapper.m_Character_Attack;
        public InputAction @RPGStop => m_Wrapper.m_Character_RPGStop;
        public InputAction @Use => m_Wrapper.m_Character_Use;
        public InputAction @Block => m_Wrapper.m_Character_Block;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @CamSwitch.started += instance.OnCamSwitch;
            @CamSwitch.performed += instance.OnCamSwitch;
            @CamSwitch.canceled += instance.OnCamSwitch;
            @MouseView.started += instance.OnMouseView;
            @MouseView.performed += instance.OnMouseView;
            @MouseView.canceled += instance.OnMouseView;
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
            @MouseRightClick.started += instance.OnMouseRightClick;
            @MouseRightClick.performed += instance.OnMouseRightClick;
            @MouseRightClick.canceled += instance.OnMouseRightClick;
            @ControlNextUnit.started += instance.OnControlNextUnit;
            @ControlNextUnit.performed += instance.OnControlNextUnit;
            @ControlNextUnit.canceled += instance.OnControlNextUnit;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @RPGStop.started += instance.OnRPGStop;
            @RPGStop.performed += instance.OnRPGStop;
            @RPGStop.canceled += instance.OnRPGStop;
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
            @Block.started += instance.OnBlock;
            @Block.performed += instance.OnBlock;
            @Block.canceled += instance.OnBlock;
        }

        private void UnregisterCallbacks(ICharacterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @CamSwitch.started -= instance.OnCamSwitch;
            @CamSwitch.performed -= instance.OnCamSwitch;
            @CamSwitch.canceled -= instance.OnCamSwitch;
            @MouseView.started -= instance.OnMouseView;
            @MouseView.performed -= instance.OnMouseView;
            @MouseView.canceled -= instance.OnMouseView;
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
            @MouseRightClick.started -= instance.OnMouseRightClick;
            @MouseRightClick.performed -= instance.OnMouseRightClick;
            @MouseRightClick.canceled -= instance.OnMouseRightClick;
            @ControlNextUnit.started -= instance.OnControlNextUnit;
            @ControlNextUnit.performed -= instance.OnControlNextUnit;
            @ControlNextUnit.canceled -= instance.OnControlNextUnit;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @RPGStop.started -= instance.OnRPGStop;
            @RPGStop.performed -= instance.OnRPGStop;
            @RPGStop.canceled -= instance.OnRPGStop;
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
            @Block.started -= instance.OnBlock;
            @Block.performed -= instance.OnBlock;
            @Block.canceled -= instance.OnBlock;
        }

        public void RemoveCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterActions @Character => new CharacterActions(this);
    public interface ICharacterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamSwitch(InputAction.CallbackContext context);
        void OnMouseView(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
        void OnControlNextUnit(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnRPGStop(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
    }
}
